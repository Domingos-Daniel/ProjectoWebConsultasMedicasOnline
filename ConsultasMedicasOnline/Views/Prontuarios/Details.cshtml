@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@model ConsultasMedicasOnline.Models.Prontuario

@{
    ViewData["Title"] = "Detalhes do Prontuário";
    bool isMedico = User.IsInRole("Medico");
    bool isAdmin = User.IsInRole("Administrador");
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-white py-8">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8 flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-medical-800">
                    <i class="fas fa-file-medical text-primary-600 mr-3"></i>
                    Prontuário Médico
                </h1>
                <p class="text-lg text-medical-600 mt-2">
                    Consulta de @Model.Consulta.DataHora.ToString("dd/MM/yyyy 'às' HH:mm")
                </p>
            </div>
            
            <div class="flex space-x-3">
                <a href="@Url.Action("Print", new { id = Model.Id })" target="_blank" class="bg-info-100 text-info-700 px-4 py-2 rounded-lg hover:bg-info-200 transition-colors duration-200">
                    <i class="fas fa-print mr-2"></i>
                    Imprimir
                </a>
                
                <a href="@Url.Action("Details", "Consultas", new { id = Model.ConsultaId })" class="bg-medical-100 text-medical-700 px-4 py-2 rounded-lg hover:bg-medical-200 transition-colors duration-200">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Voltar para Consulta
                </a>
                
                @if ((isMedico && Model.Medico.UsuarioId == User.FindFirstValue(ClaimTypes.NameIdentifier)) || isAdmin)
                {
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="bg-warning-100 text-warning-700 px-4 py-2 rounded-lg hover:bg-warning-200 transition-colors duration-200">
                        <i class="fas fa-edit mr-2"></i>
                        Editar
                    </a>
                }
            </div>
        </div>

        <!-- Patient and Doctor Info -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-xl shadow-sm border border-medical-200 p-6">
                <h2 class="text-xl font-semibold text-medical-800 mb-4 flex items-center">
                    <i class="fas fa-user text-primary-600 mr-2"></i>
                    Dados do Paciente
                </h2>
                
                <div class="flex items-center mb-4">
                    <div class="h-14 w-14 bg-purple-100 rounded-full flex items-center justify-center">
                        <span class="text-purple-600 text-lg font-bold">
                            @Model.Paciente.Usuario.Nome.First()@Model.Paciente.Usuario.Sobrenome.First()
                        </span>
                    </div>
                    <div class="ml-4">
                        <h3 class="font-semibold text-lg text-medical-800">
                            @Model.Paciente.Usuario.Nome @Model.Paciente.Usuario.Sobrenome
                        </h3>
                        <p class="text-medical-600">
                            @if (Model.Paciente.DataNascimento.HasValue)
                            {
                                <span>@Model.Paciente.DataNascimento.Value.ToString("dd/MM/yyyy")</span>
                                <span class="text-xs ml-2">(@(DateTime.Now.Year - Model.Paciente.DataNascimento.Value.Year) anos)</span>
                            }
                            else
                            {
                                <span class="text-medical-500">Data de nascimento não informada</span>
                            }
                        </p>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm text-medical-600">Tipo Sanguíneo</p>
                        <p class="font-semibold text-medical-800">
                            @if (!string.IsNullOrEmpty(Model.Paciente.TipoSanguineo))
                            {
                                @Model.Paciente.TipoSanguineo
                            }
                            else
                            {
                                <span class="text-medical-500">Não informado</span>
                            }
                        </p>
                    </div>
                    
                    <div>
                        <p class="text-sm text-medical-600">Alergias</p>
                        <p class="font-semibold text-medical-800">
                            @if (!string.IsNullOrEmpty(Model.Paciente.Alergias))
                            {
                                @Model.Paciente.Alergias
                            }
                            else
                            {
                                <span class="text-medical-500">Nenhuma alergia registrada</span>
                            }
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-sm border border-medical-200 p-6">
                <h2 class="text-xl font-semibold text-medical-800 mb-4 flex items-center">
                    <i class="fas fa-user-md text-primary-600 mr-2"></i>
                    Médico Responsável
                </h2>
                
                <div class="flex items-center mb-4">
                    <div class="h-14 w-14 bg-blue-100 rounded-full flex items-center justify-center">
                        <span class="text-blue-600 text-lg font-bold">
                            @Model.Medico.Usuario.Nome.First()@Model.Medico.Usuario.Sobrenome.First()
                        </span>
                    </div>
                    <div class="ml-4">
                        <h3 class="font-semibold text-lg text-medical-800">
                            Dr. @Model.Medico.Usuario.Nome @Model.Medico.Usuario.Sobrenome
                        </h3>
                        <p class="text-medical-600">
                            @Model.Medico.Especialidade.Nome - CRM @Model.Medico.CRM/@Model.Medico.EstadoCRM
                        </p>
                    </div>
                </div>
                
                <div class="text-sm text-medical-700 mt-4">
                    <p>
                        <i class="fas fa-calendar-check text-success-600 mr-2"></i>
                        Prontuário criado em @Model.DataCriacao.ToString("dd/MM/yyyy 'às' HH:mm")
                    </p>
                </div>
            </div>
        </div>

        <!-- Medical Record Content -->
        <div class="space-y-6">
            <div class="bg-white rounded-xl shadow-sm border border-medical-200 p-6">
                <h2 class="text-xl font-semibold text-medical-800 mb-4">
                    <i class="fas fa-clipboard-list text-primary-600 mr-2"></i>
                    Anamnese e Exame Físico
                </h2>
                
                @if (!string.IsNullOrEmpty(Model.HistoriaClinica))
                {
                    <div class="mb-6">
                        <h3 class="text-lg text-primary-800 mb-2">História Clínica</h3>
                        <div class="bg-blue-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.HistoriaClinica</p>
                        </div>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.ExameFisico))
                {
                    <div>
                        <h3 class="text-lg text-primary-800 mb-2">Exame Físico</h3>
                        <div class="bg-blue-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.ExameFisico</p>
                        </div>
                    </div>
                }
                
                @if (string.IsNullOrEmpty(Model.HistoriaClinica) && string.IsNullOrEmpty(Model.ExameFisico))
                {
                    <p class="text-medical-500 italic">Nenhuma informação de anamnese ou exame físico registrada.</p>
                }
            </div>
            
            <div class="bg-white rounded-xl shadow-sm border border-medical-200 p-6">
                <h2 class="text-xl font-semibold text-medical-800 mb-4">
                    <i class="fas fa-stethoscope text-primary-600 mr-2"></i>
                    Diagnóstico e Plano
                </h2>
                
                @if (!string.IsNullOrEmpty(Model.Hipoteses))
                {
                    <div class="mb-6">
                        <h3 class="text-lg text-primary-800 mb-2">Hipóteses Diagnósticas</h3>
                        <div class="bg-info-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.Hipoteses</p>
                        </div>
                    </div>
                }
                
                <div class="mb-6">
                    <h3 class="text-lg text-primary-800 mb-2">Diagnóstico Principal</h3>
                    <div class="bg-success-50 p-4 rounded-lg text-medical-800 border-l-4 border-success-500">
                        <p class="font-medium">@Model.Diagnostico</p>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Tratamento))
                {
                    <div>
                        <h3 class="text-lg text-primary-800 mb-2">Plano de Tratamento</h3>
                        <div class="bg-info-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.Tratamento</p>
                        </div>
                    </div>
                }
            </div>
            
            <div class="bg-white rounded-xl shadow-sm border border-medical-200 p-6">
                <h2 class="text-xl font-semibold text-medical-800 mb-4">
                    <i class="fas fa-prescription text-primary-600 mr-2"></i>
                    Prescrições e Orientações
                </h2>
                
                @if (!string.IsNullOrEmpty(Model.Prescricoes))
                {
                    <div class="mb-6">
                        <h3 class="text-lg text-primary-800 mb-2">Medicamentos Prescritos</h3>
                        <div class="bg-warning-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.Prescricoes</p>
                        </div>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.ExamesSolicitados))
                {
                    <div class="mb-6">
                        <h3 class="text-lg text-primary-800 mb-2">Exames Solicitados</h3>
                        <div class="bg-indigo-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.ExamesSolicitados</p>
                        </div>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.OrientacoesGerais))
                {
                    <div class="mb-6">
                        <h3 class="text-lg text-primary-800 mb-2">Orientações Gerais</h3>
                        <div class="bg-blue-50 p-4 rounded-lg text-medical-800">
                            <p>@Model.OrientacoesGerais</p>
                        </div>
                    </div>
                }
                
                @if (Model.ProximaConsulta.HasValue)
                {
                    <div class="bg-green-50 p-4 rounded-lg border-l-4 border-green-500">
                        <h3 class="text-lg text-green-800 mb-2">Retorno Agendado</h3>
                        <p class="text-green-700 font-medium">
                            <i class="fas fa-calendar-alt mr-2"></i>
                            @Model.ProximaConsulta.Value.ToString("dd/MM/yyyy")
                        </p>
                    </div>
                }
                
                @if (string.IsNullOrEmpty(Model.Prescricoes) && string.IsNullOrEmpty(Model.ExamesSolicitados) && 
                    string.IsNullOrEmpty(Model.OrientacoesGerais) && !Model.ProximaConsulta.HasValue)
                {
                    <p class="text-medical-500 italic">Nenhuma prescrição ou orientação registrada.</p>
                }
            </div>
        </div>

        <!-- Download Button -->
        <div class="flex justify-end">
            <button onclick="downloadProntuarioPDF()" class="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors duration-200 inline-flex items-center">
                <i class="fas fa-file-pdf mr-2"></i>
                Download Prontuário
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
        function downloadProntuarioPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Configuração do documento
            const pageWidth = doc.internal.pageSize.getWidth();
            const pageHeight = doc.internal.pageSize.getHeight();
            let yPosition = 20;
            
            // Cores do tema médico
            const primaryBlue = [41, 128, 185];
            const darkBlue = [44, 62, 80];
            const lightGray = [236, 240, 241];
            const darkGray = [127, 140, 141];
            const accentGreen = [39, 174, 96];
            
            // Cabeçalho com logo e informações da clínica
            doc.setFillColor(primaryBlue[0], primaryBlue[1], primaryBlue[2]);
            doc.rect(0, 0, pageWidth, 35, 'F');
            
            // Logo MedConsulta (simulado com texto estilizado)
            doc.setTextColor(255, 255, 255);
            doc.setFontSize(24);
            doc.setFont(undefined, 'bold');
            doc.text('MED', 15, 20);
            doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
            doc.text('CONSULTA', 42, 20);
            
            // Subtítulo do cabeçalho
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(255, 255, 255);
            doc.text('Sistema de Consultas Médicas Online', 15, 28);
            
            // Informações da clínica no canto direito
            doc.setTextColor(255, 255, 255);
            doc.setFontSize(8);
            doc.text('Tel: +244 923 456 789', pageWidth - 60, 18);
            doc.text('Email: contato@medconsulta.ao', pageWidth - 60, 24);
            doc.text('www.medconsulta.ao', pageWidth - 60, 30);
            
            yPosition = 50;
            
            // Título do documento
            doc.setTextColor(darkBlue[0], darkBlue[1], darkBlue[2]);
            doc.setFontSize(22);
            doc.setFont(undefined, 'bold');
            doc.text('PRONTUÁRIO MÉDICO', pageWidth / 2, yPosition, { align: 'center' });
            yPosition += 10;
            
            // Data de emissão
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
            doc.text('Emitido em: ' + new Date().toLocaleDateString('pt-BR'), pageWidth / 2, yPosition, { align: 'center' });
            yPosition += 15;
            
            // Função para criar seções com fundo colorido
            function criarSecao(titulo, yPos) {
                doc.setFillColor(lightGray[0], lightGray[1], lightGray[2]);
                doc.rect(10, yPos - 8, pageWidth - 20, 12, 'F');
                doc.setTextColor(darkBlue[0], darkBlue[1], darkBlue[2]);
                doc.setFontSize(12);
                doc.setFont(undefined, 'bold');
                doc.text(titulo, 15, yPos);
                return yPos + 10;
            }
            
            // Função para adicionar linha decorativa
            function adicionarLinha(yPos) {
                doc.setDrawColor(primaryBlue[0], primaryBlue[1], primaryBlue[2]);
                doc.setLineWidth(0.5);
                doc.line(15, yPos, pageWidth - 15, yPos);
                return yPos + 5;
            }
            
            // Seção de informações da consulta
            yPosition = criarSecao('🏥 INFORMAÇÕES DA CONSULTA', yPosition);
            
            doc.setTextColor(0, 0, 0);
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            
            // Grid de informações da consulta
            const consultaY = yPosition;
            doc.text('Data e Hora:', 15, consultaY);
            doc.setFont(undefined, 'bold');
            doc.text('@Model.Consulta.DataHora.ToString("dd/MM/yyyy HH:mm")', 50, consultaY);
            
            doc.setFont(undefined, 'normal');
            doc.text('Tipo:', 120, consultaY);
            doc.setFont(undefined, 'bold');
            doc.text('@(Model.Consulta.Tipo == ConsultasMedicasOnline.Models.TipoConsulta.Presencial ? "Presencial" : "Online")', 140, consultaY);
            
            doc.setFont(undefined, 'normal');
            doc.text('Consulta Nº:', 15, consultaY + 8);
            doc.setFont(undefined, 'bold');
            doc.text('@Model.ConsultaId', 50, consultaY + 8);
            
            yPosition = consultaY + 20;
            yPosition = adicionarLinha(yPosition);
            
            // Seção do paciente
            yPosition = criarSecao('👤 DADOS DO PACIENTE', yPosition);
            
            doc.setFont(undefined, 'normal');
            doc.setTextColor(0, 0, 0);
            
            const pacienteY = yPosition;
            doc.text('Nome Completo:', 15, pacienteY);
            doc.setFont(undefined, 'bold');
            doc.text('@Model.Paciente.Usuario.Nome @Model.Paciente.Usuario.Sobrenome', 55, pacienteY);
            
            @if (Model.Paciente.DataNascimento.HasValue)
            {
                <text>
                doc.setFont(undefined, 'normal');
                doc.text('Data de Nascimento:', 15, pacienteY + 8);
                doc.setFont(undefined, 'bold');
                doc.text('@Model.Paciente.DataNascimento.Value.ToString("dd/MM/yyyy")', 70, pacienteY + 8);
                
                doc.setFont(undefined, 'normal');
                doc.text('Idade:', 130, pacienteY + 8);
                doc.setFont(undefined, 'bold');
                doc.text('@(DateTime.Now.Year - Model.Paciente.DataNascimento.Value.Year) anos', 150, pacienteY + 8);
                
                yPosition = pacienteY + 16;
                </text>
            }
            else
            {
                <text>yPosition = pacienteY + 8;</text>
            }
            
            @if (!string.IsNullOrEmpty(Model.Paciente.TipoSanguineo))
            {
                <text>
                doc.setFont(undefined, 'normal');
                doc.text('Tipo Sanguíneo:', 15, yPosition);
                doc.setFont(undefined, 'bold');
                doc.setTextColor(accentGreen[0], accentGreen[1], accentGreen[2]);
                doc.text('@Model.Paciente.TipoSanguineo', 65, yPosition);
                doc.setTextColor(0, 0, 0);
                yPosition += 8;
                </text>
            }
            
            @if (!string.IsNullOrEmpty(Model.Paciente.Alergias))
            {
                <text>
                doc.setFont(undefined, 'normal');
                doc.text('Alergias:', 15, yPosition);
                doc.setFont(undefined, 'bold');
                doc.setTextColor(220, 53, 69);
                doc.text('@Model.Paciente.Alergias', 45, yPosition);
                doc.setTextColor(0, 0, 0);
                yPosition += 8;
                </text>
            }
            
            yPosition += 5;
            yPosition = adicionarLinha(yPosition);
            
            // Seção do médico
            yPosition = criarSecao('👨‍⚕️ MÉDICO RESPONSÁVEL', yPosition);
            
            const medicoY = yPosition;
            doc.setFont(undefined, 'normal');
            doc.text('Nome:', 15, medicoY);
            doc.setFont(undefined, 'bold');
            doc.text('Dr. @Model.Medico.Usuario.Nome @Model.Medico.Usuario.Sobrenome', 40, medicoY);
            
            doc.setFont(undefined, 'normal');
            doc.text('Especialidade:', 15, medicoY + 8);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(primaryBlue[0], primaryBlue[1], primaryBlue[2]);
            doc.text('@Model.Medico.Especialidade.Nome', 60, medicoY + 8);
            doc.setTextColor(0, 0, 0);
            
            doc.setFont(undefined, 'normal');
            doc.text('CRM:', 15, medicoY + 16);
            doc.setFont(undefined, 'bold');
            doc.text('@Model.Medico.CRM/@Model.Medico.EstadoCRM', 35, medicoY + 16);
            
            yPosition = medicoY + 25;
            yPosition = adicionarLinha(yPosition);
            
            // Verificar se precisa de nova página
            if (yPosition > pageHeight - 80) {
                doc.addPage();
                yPosition = 20;
            }
            
            // Seções clínicas
            @if (!string.IsNullOrEmpty(Model.HistoriaClinica))
            {
                <text>
                yPosition = criarSecao('📋 HISTÓRIA CLÍNICA', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const historiaLines = doc.splitTextToSize('@Html.Raw(Model.HistoriaClinica.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(historiaLines, 15, yPosition);
                yPosition += historiaLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            @if (!string.IsNullOrEmpty(Model.ExameFisico))
            {
                <text>
                if (yPosition > pageHeight - 60) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                yPosition = criarSecao('🔍 EXAME FÍSICO', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const exameLines = doc.splitTextToSize('@Html.Raw(Model.ExameFisico.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(exameLines, 15, yPosition);
                yPosition += exameLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            @if (!string.IsNullOrEmpty(Model.Hipoteses))
            {
                <text>
                if (yPosition > pageHeight - 60) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                yPosition = criarSecao('🤔 HIPÓTESES DIAGNÓSTICAS', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const hipotesesLines = doc.splitTextToSize('@Html.Raw(Model.Hipoteses.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(hipotesesLines, 15, yPosition);
                yPosition += hipotesesLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            // Diagnóstico principal (destacado)
            if (yPosition > pageHeight - 60) {
                doc.addPage();
                yPosition = 20;
            }
            
            doc.setFillColor(accentGreen[0], accentGreen[1], accentGreen[2]);
            doc.rect(10, yPosition - 8, pageWidth - 20, 12, 'F');
            doc.setTextColor(255, 255, 255);
            doc.setFontSize(12);
            doc.setFont(undefined, 'bold');
            doc.text('✅ DIAGNÓSTICO PRINCIPAL', 15, yPosition);
            yPosition += 10;
            
            doc.setFontSize(11);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(0, 0, 0);
            const diagnosticoLines = doc.splitTextToSize('@Html.Raw(Model.Diagnostico.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
            doc.text(diagnosticoLines, 15, yPosition);
            yPosition += diagnosticoLines.length * 6 + 10;
            yPosition = adicionarLinha(yPosition);
            
            @if (!string.IsNullOrEmpty(Model.Tratamento))
            {
                <text>
                if (yPosition > pageHeight - 60) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                yPosition = criarSecao('💊 PLANO DE TRATAMENTO', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const tratamentoLines = doc.splitTextToSize('@Html.Raw(Model.Tratamento.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(tratamentoLines, 15, yPosition);
                yPosition += tratamentoLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            @if (!string.IsNullOrEmpty(Model.Prescricoes))
            {
                <text>
                if (yPosition > pageHeight - 60) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                yPosition = criarSecao('💉 PRESCRIÇÕES MÉDICAS', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const prescricoesLines = doc.splitTextToSize('@Html.Raw(Model.Prescricoes.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(prescricoesLines, 15, yPosition);
                yPosition += prescricoesLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            @if (!string.IsNullOrEmpty(Model.ExamesSolicitados))
            {
                <text>
                if (yPosition > pageHeight - 60) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                yPosition = criarSecao('🧪 EXAMES SOLICITADOS', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const examesLines = doc.splitTextToSize('@Html.Raw(Model.ExamesSolicitados.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(examesLines, 15, yPosition);
                yPosition += examesLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            @if (!string.IsNullOrEmpty(Model.OrientacoesGerais))
            {
                <text>
                if (yPosition > pageHeight - 60) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                yPosition = criarSecao('📝 ORIENTAÇÕES GERAIS', yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(0, 0, 0);
                const orientacoesLines = doc.splitTextToSize('@Html.Raw(Model.OrientacoesGerais.Replace("\"", "\\\"").Replace("\n", " ").Replace("\r", " "))', pageWidth - 30);
                doc.text(orientacoesLines, 15, yPosition);
                yPosition += orientacoesLines.length * 5 + 10;
                yPosition = adicionarLinha(yPosition);
                </text>
            }
            
            @if (Model.ProximaConsulta.HasValue)
            {
                <text>
                if (yPosition > pageHeight - 40) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                // Próxima consulta destacada
                doc.setFillColor(255, 193, 7);
                doc.rect(10, yPosition - 8, pageWidth - 20, 20, 'F');
                doc.setTextColor(52, 58, 64);
                doc.setFontSize(12);
                doc.setFont(undefined, 'bold');
                doc.text('📅 RETORNO AGENDADO', 15, yPosition);
                
                doc.setFontSize(14);
                doc.setFont(undefined, 'bold');
                doc.text('@Model.ProximaConsulta.Value.ToString("dd/MM/yyyy")', 15, yPosition + 10);
                yPosition += 25;
                </text>
            }
            
            // Rodapé em todas as páginas
            const totalPages = doc.internal.getNumberOfPages();
            for (let i = 1; i <= totalPages; i++) {
                doc.setPage(i);
                
                // Linha do rodapé
                doc.setDrawColor(primaryBlue[0], primaryBlue[1], primaryBlue[2]);
                doc.setLineWidth(1);
                doc.line(15, pageHeight - 25, pageWidth - 15, pageHeight - 25);
                
                // Informações do rodapé
                doc.setFontSize(8);
                doc.setFont(undefined, 'normal');
                doc.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
                doc.text('Prontuário gerado em: ' + new Date().toLocaleString('pt-BR'), 15, pageHeight - 18);
                doc.text('Data de criação: @Model.DataCriacao.ToString("dd/MM/yyyy HH:mm")', 15, pageHeight - 12);
                
                // Assinatura digital
                doc.setTextColor(primaryBlue[0], primaryBlue[1], primaryBlue[2]);
                doc.setFont(undefined, 'bold');
                doc.text('MedConsulta - Sistema Médico Digital', pageWidth - 80, pageHeight - 18);
                doc.setFont(undefined, 'normal');
                doc.text(`Página ${i} de ${totalPages}`, pageWidth - 30, pageHeight - 12);
                
                // Código de verificação
                doc.setFontSize(6);
                doc.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
                doc.text('Código de verificação: MED-@Model.Id-@Model.DataCriacao.ToString("yyyyMMdd")', 15, pageHeight - 6);
            }
            
            // Salvar o PDF com nome personalizado
            const fileName = `Prontuario_@(Model.Paciente.Usuario.Nome.Replace(" ", "_"))_@(Model.Consulta.DataHora.ToString("yyyyMMdd")).pdf`;
            doc.save(fileName);
        }
    </script>
}
